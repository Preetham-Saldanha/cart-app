// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  image          String?
  email          String?   @unique
  emailVerified  DateTime?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @updatedAt
  address        String?
  // orderIds       String[]   @db.ObjectId
  // cartItemIds String[]   @db.ObjectId
  sessions       Session[]
  accounts       Account[]
  Address        Address[]
}

model Address {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  email        String  @unique
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  postalCode   String
  landmark     String?
  User         User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String  @db.ObjectId
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.ObjectId
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String?  @db.ObjectId
  expires      DateTime
  User         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  // fakeStoreId String @db.ObjectId
  title String
  price Float
  image String

  description String?
  category    String?

  cartItem CartItem[]

  rating    Rating      @relation(fields: [ratingId], references: [id])
  ratingId  String      @db.ObjectId
  OrderItem OrderItem[]
}

model Rating {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  rate  Float
  count Int

  Product Product[]
}

model Order {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  email             String
  amount            Int
  // itemsDetail       String
  status            String
  createdAt         DateTime    @default(now())
  checkout_event_id String
  orderItems        OrderItem[]
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId
  quantity  Int
}

model CartItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  // user     User    @relation(fields: [userId], references: [id])
  userId    String  @db.ObjectId
  quantity  Int
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId
}

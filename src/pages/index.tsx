import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'

import { getSession, signOut } from 'next-auth/react'
import { NextPageContext } from 'next'
import useCurrentUser from '@/hooks/useCurrentUser'
import Layout from '@/components/layout'
import { useEffect, useRef, useState } from 'react'
import Banner from '@/components/banner'
import ProductFeed from '@/components/productFeed'
import prismadb from '../lib/prismadb'
import useFilteredProducts from"@/hooks/useFilteredProducts"

const inter = Inter({ subsets: ['latin'] })

// const result = await prisma.user.findMany({
//   where: {
//     OR: [
//       {
//         email: {
//           endsWith: 'prisma.io',
//         },
//       },
//       { email: { endsWith: 'gmail.com' } },
//     ], }
//   })

export type ProductType = {
  id: string,
  title: string,
  price: number,
  description: string | null,
  category: string | null,
  image: string,
  rating: {
    rate: number,
    count: number
  }
}
export type RatingType = {
  rate: number,
  count: number
}

export async function getServerSideProps(context: NextPageContext) {
  const session = await getSession(context);
  console.log(session)
  if (!session) {
    return {
      redirect: {
        destination: '/auth',
        permanent: false
      }
    }
  }

  let products: (ProductType & { rating: RatingType })[] = []
  try {
    // products = await fetch('https://fakestoreapi.com/products').then(res => res.json())
    // const data = await fetch('https://api.storerestapi.com/products')
    products = await prismadb.product.findMany({
      include: {
        rating: true
      }
    })
    console.log(products.length)
  } catch (error) {
    console.log(error)
  } finally {
    return {
      props: { products }
    }
  }


}

export default function Home({ products }: { products: ProductType[] }) {

  const { data: user } = useCurrentUser();

  const {filteredProducts, setFilteredProducts, query } = useFilteredProducts();


  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>

        <Layout>
          {/* <div>
          <p>logged in as : {user?.email}</p>
          <button onClick={() => signOut()}>Sign out</button>
          </div> */}
          <div className='bg-gray-200 min-h-screen'>
            <Banner />
            <ProductFeed products={query===""?products:filteredProducts} />
          </div>
        </Layout>
      </main>
    </>
  )
}


